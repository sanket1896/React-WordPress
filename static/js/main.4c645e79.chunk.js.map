{"version":3,"sources":["Variable.js","components/Post.js","components/LoadingScreen.js","components/Pagination.js","components/Posts.js","components/PostPage.js","components/NormalHeader.js","components/StickyHeader.js","App.js","serviceWorker.js","index.js"],"names":["Variable","Post","react_default","a","createElement","className","src","alt","Link","to","concat","this","props","data","slug","style","textDecoration","title","rendered","Component","LoadingScreen","react_loader_spinner_default","type","color","height","width","Pagination","_this$props","prevPage","nextPage","buttonState","prev","next","value","onClick","disabled","Posts","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","totalPages","currentPage","item","getPosts","bind","assertThisInitialized","getNextPage","getPrevPage","pageNumber","_this2","setState","fetch","Config","then","res","headers","get","json","result","items","window","scrollTo","catch","err","console","log","_this$state","map","index","components_Post","key","Pagination_Pagination","LoadingScreen_LoadingScreen","PostPage","match","params","id","dangerouslySetInnerHTML","__html","content","NormalHeader","StickyHeader","handleScroll","visible","addEventListener","removeEventListener","y","scrollY","containerTop","App","BrowserRouter","basename","process","components_NormalHeader","StickyHeader_StickyHeader","Switch","Route","path","component","exact","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c645e79.chunk.js","sourcesContent":["export default {\n  BASE_URL : \"https://thundery-rescue.000webhostapp.com/wp-json/wp/v2/\"\n}","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Post extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"post\">\r\n        <img src=\"https://via.placeholder.com/300x150\" alt=\"\" />\r\n        <Link\r\n          to={`/post/${this.props.data.slug}`}\r\n          style={{ textDecoration: \"none\" }}\r\n        >\r\n          <h3 className=\"post-title\">{this.props.data.title.rendered}</h3>\r\n        </Link>\r\n        {/* <div className=\"\">\r\n            {this.props.data.cats.map((cat,index) => (\r\n              <span className=\"category-tag\" key={index}>{cat.name}</span>\r\n            ))}\r\n          </div> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Post;\r\n","import React, { Component } from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nexport default class LoadingScreen extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"loading-screen-center\">\r\n        <Loader type=\"Ball-Triangle\" color=\"#00BFFF\" height=\"100\" width=\"100\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\n\nexport default class Pagination extends Component {\n  render() {\n    const { prevPage, nextPage, buttonState } = this.props;\n    const { prev, next } = buttonState;\n\n    return (\n      <div className=\"pagination\">\n        <input type=\"button\" value=\"Prev\" onClick={prevPage} disabled={!prev} />{\" \"}\n        <input type=\"button\" value=\"Next\" onClick={nextPage} disabled={!next} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\r\nimport Config from \"../Variable\";\r\nimport Post from \"./Post\";\r\nimport LoadingScreen from \"./LoadingScreen\";\r\nimport Pagination from \"./Pagination\";\r\n\r\nclass Posts extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoading: false,\r\n      totalPages: \"\",\r\n      currentPage: \"\",\r\n      prevPage: \"\",\r\n      nextPage: \"\",\r\n      item: []\r\n    };\r\n    this.getPosts = this.getPosts.bind(this);\r\n    this.getNextPage = this.getNextPage.bind(this);\r\n    this.getPrevPage = this.getPrevPage.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // First time load\r\n    this.getPosts(1);\r\n  }\r\n\r\n  getPosts(pageNumber) {\r\n    //show loading\r\n    this.setState({\r\n      isLoading: false,\r\n    });\r\n\r\n    // start fetching data\r\n    let totalPages = \"\";\r\n    const per_page = 6;\r\n    fetch(`${Config.BASE_URL}Posts?per_page=${per_page}&page=${pageNumber}`)\r\n      .then(res => {\r\n        totalPages = res.headers.get(\"X-WP-TotalPages\");\r\n        return res.json();\r\n      })\r\n      .then(result => {\r\n        // set new state and page numbers\r\n        const prevPage = pageNumber <= 1 ? null : pageNumber - 1;\r\n        const nextPage = totalPages == pageNumber ? null : pageNumber + 1;\r\n\r\n        this.setState({\r\n          isLoading: true,\r\n          totalPages: totalPages,\r\n          currentPage: pageNumber,\r\n          prevPage: prevPage,\r\n          nextPage: nextPage,\r\n          items: result\r\n        });\r\n\r\n        window.scrollTo(0, 0);\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  getNextPage() {\r\n    if (this.state.nextPage) this.getPosts(this.state.nextPage);\r\n  }\r\n  getPrevPage() {\r\n    if (this.state.prevPage) this.getPosts(this.state.prevPage);\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, items } = this.state;\r\n\r\n    if (!isLoading) {\r\n      return <LoadingScreen />;\r\n    } else {\r\n      return (\r\n        <div className=\"container\">\r\n          <div className=\"post-list\">\r\n            {items.map((item, index) => (\r\n              <Post key={index} data={item} />\r\n            ))}\r\n          </div>\r\n          <Pagination\r\n            nextPage={this.getNextPage}\r\n            prevPage={this.getPrevPage}\r\n            buttonState={{\r\n              prev: this.state.prevPage,\r\n              next: this.state.nextPage\r\n            }}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Posts;\r\n","import React, { Component } from \"react\";\r\nimport Config from \"../Variable\";\r\nimport LoadingScreen from \"./LoadingScreen\";\r\n\r\nclass PostPage extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isLoading: false,\r\n      item: []\r\n    };\r\n  }\r\n\r\n  componentDidMount(props) {\r\n    fetch(\r\n      `${Config.BASE_URL}posts?slug=${\r\n        this.props.match.params.id\r\n      }`\r\n    )\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        this.setState({\r\n          isLoading: true,\r\n          item: result\r\n        });\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, item } = this.state;\r\n\r\n    if (!isLoading) {\r\n      return <LoadingScreen />;\r\n    } else {\r\n      return (\r\n        <div className=\"post-page\">\r\n          <h1>{item[0].title.rendered}</h1>\r\n          <div\r\n            className=\"post-content\"\r\n            dangerouslySetInnerHTML={{ __html: item[0].content.rendered }}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default PostPage;\r\n","import React from 'react'\r\n\r\nconst NormalHeader = () => {\r\n  return (\r\n    <header>\r\n      <div className=\"header-container\">\r\n        <h1>thundery Rescue</h1>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default NormalHeader;","import React, { Component } from \"react\";\n\nexport default class StickyHeader extends Component {\n  constructor(props) {\n    super(props);\n    this.handleScroll = this.handleScroll.bind(this);\n    this.state = {\n      visible: false\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"scroll\", this.handleScroll);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"scroll\", this.handleScroll);\n  }\n\n  handleScroll() {\n    const y = window.scrollY;\n    if (!this.props.containerTop) return;\n    this.setState({\n      visible: y > this.props.containerTop\n    });\n  }\n\n  render() {\n    const className = this.state.visible\n      ? \"stickyHeader isStuck\"\n      : \"stickyHeader\";\n    return (\n      <header className={className}>\n        <div className=\"header-container\">\n          <h1>Stickey thundery Rescue</h1>\n        </div>\n      </header>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport Posts from \"./components/Posts\";\nimport PostPage from \"./components/PostPage\";\nimport NormalHeader from \"./components/NormalHeader\";\nimport StickyHeader from \"./components/StickyHeader\";\nimport \"./App.css\";\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<BrowserRouter basename={process.env.PUBLIC_URL}>\n\t\t\t\t<div>\n\t\t\t\t\t<NormalHeader />\n\t\t\t\t\t<StickyHeader containerTop={50} />\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/\" component={Posts} exact={true} />\n\t\t\t\t\t\t<Route path=\"/post/:id\" component={PostPage} />\n\t\t\t\t\t\t<Route component={() => <div>404 not found</div>} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</BrowserRouter>\n\t\t);\n\t}\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}