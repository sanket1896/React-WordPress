{"version":3,"sources":["Variable.js","components/Post.js","components/LoadingScreen.js","components/Pagination.js","components/Posts.js","components/PostPage.js","components/NormalHeader.js","App.js","components/StickyHeader.js","serviceWorker.js","index.js"],"names":["Variable","Post","imgurl","data","this","props","_embedded","console","log","source_url","react_default","a","createElement","className","src","alt","Link","to","concat","slug","style","textDecoration","title","rendered","Component","LoadingScreen","react_loader_spinner_default","type","color","height","width","Pagination","_this$props","prevPage","nextPage","buttonState","prev","next","value","onClick","disabled","Posts","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","totalPages","currentPage","item","getPosts","bind","assertThisInitialized","getNextPage","getPrevPage","pageNumber","_this2","setState","fetch","Config","then","res","headers","get","json","result","items","window","scrollTo","catch","err","_this$state","map","index","components_Post","key","Pagination_Pagination","LoadingScreen_LoadingScreen","PostPage","match","params","id","dangerouslySetInnerHTML","__html","content","NormalHeader","App","BrowserRouter","basename","process","components_NormalHeader","Switch","Route","path","component","exact","Boolean","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a5b96c65.chunk.js","sourcesContent":["export default {\n  BASE_URL : \"https://thundery-rescue.000webhostapp.com/wp-json/wp/v2/\"\n}","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Post extends Component {\r\n  \r\n  render() {\r\n    const data = this.props.data;\r\n    let imgurl;\r\n\r\n    if ('wp:featuredmedia' in data._embedded){\r\n      console.log(\"exist\");\r\n      imgurl = data._embedded['wp:featuredmedia']['0'].source_url;\r\n    } else {\r\n      imgurl = 'No Image';\r\n    }\r\n    console.log(data);\r\n    \r\n    return (\r\n      <div className=\"post\">\r\n        {/* <span>\r\n          {imgurl}\r\n        </span> */}\r\n        <img src={imgurl} alt=\"\" />\r\n        <Link\r\n          to={`/post/${data.slug}`}\r\n          style={{ textDecoration: \"none\" }}\r\n        >\r\n          <h3 className=\"post-title\">{data.title.rendered}</h3>\r\n        </Link>\r\n        {/* <div className=\"\">\r\n            {data.cats.map((cat,index) => (\r\n              <span className=\"category-tag\" key={index}>{cat.name}</span>\r\n            ))}\r\n          </div> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Post;\r\n","import React, { Component } from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nexport default class LoadingScreen extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"loading-screen-center\">\r\n        <Loader type=\"Ball-Triangle\" color=\"#00BFFF\" height=\"100\" width=\"100\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\n\nexport default class Pagination extends Component {\n  render() {\n    const { prevPage, nextPage, buttonState } = this.props;\n    const { prev, next } = buttonState;\n\n    return (\n      <div className=\"pagination\">\n        <input type=\"button\" value=\"Prev\" onClick={prevPage} disabled={!prev} />{\" \"}\n        <input type=\"button\" value=\"Next\" onClick={nextPage} disabled={!next} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\r\nimport Config from \"../Variable\";\r\nimport Post from \"./Post\";\r\nimport LoadingScreen from \"./LoadingScreen\";\r\nimport Pagination from \"./Pagination\";\r\n\r\nclass Posts extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoading: false,\r\n      totalPages: \"\",\r\n      currentPage: \"\",\r\n      prevPage: \"\",\r\n      nextPage: \"\",\r\n      item: []\r\n    };\r\n    this.getPosts = this.getPosts.bind(this);\r\n    this.getNextPage = this.getNextPage.bind(this);\r\n    this.getPrevPage = this.getPrevPage.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // First time load\r\n    this.getPosts(1);\r\n  }\r\n\r\n  getPosts(pageNumber) {\r\n    //show loading\r\n    this.setState({\r\n      isLoading: false,\r\n    });\r\n\r\n    // start fetching data\r\n    let totalPages = \"\";\r\n    const per_page = 6;\r\n    fetch(`${Config.BASE_URL}Posts?per_page=${per_page}&page=${pageNumber}&_embed=1`)\r\n      .then(res => {\r\n        totalPages = res.headers.get(\"X-WP-TotalPages\");\r\n        return res.json();\r\n      })\r\n      .then(result => {\r\n        // set new state and page numbers\r\n        const prevPage = pageNumber <= 1 ? null : pageNumber - 1;\r\n        const nextPage = totalPages == pageNumber || totalPages === '0' ? null : pageNumber + 1;\r\n        console.log(totalPages);\r\n        \r\n        this.setState({\r\n          isLoading: true,\r\n          totalPages: totalPages,\r\n          currentPage: pageNumber,\r\n          prevPage: prevPage,\r\n          nextPage: nextPage,\r\n          items: result\r\n        });\r\n\r\n        window.scrollTo(0, 0);\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  getNextPage() {\r\n    if (this.state.nextPage) this.getPosts(this.state.nextPage);\r\n  }\r\n  getPrevPage() {\r\n    if (this.state.prevPage) this.getPosts(this.state.prevPage);\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, items } = this.state;\r\n\r\n    if (!isLoading) {\r\n      return <LoadingScreen />;\r\n    } else {\r\n      return (\r\n        <div className=\"container\">\r\n          <div className=\"post-list\">\r\n            {items.map((item, index) => (\r\n              <Post key={index} data={item} />\r\n            ))}\r\n          </div>\r\n          <Pagination\r\n            nextPage={this.getNextPage}\r\n            prevPage={this.getPrevPage}\r\n            buttonState={{\r\n              prev: this.state.prevPage,\r\n              next: this.state.nextPage\r\n            }}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Posts;\r\n","import React, { Component } from \"react\";\r\nimport Config from \"../Variable\";\r\nimport LoadingScreen from \"./LoadingScreen\";\r\n\r\nclass PostPage extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isLoading: false,\r\n      item: []\r\n    };\r\n  }\r\n\r\n  componentDidMount(props) {\r\n    fetch(\r\n      `${Config.BASE_URL}posts?slug=${\r\n        this.props.match.params.id\r\n      }`\r\n    )\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        this.setState({\r\n          isLoading: true,\r\n          item: result\r\n        });\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, item } = this.state;\r\n\r\n    if (!isLoading) {\r\n      return <LoadingScreen />;\r\n    } else {\r\n      return (\r\n        <div className=\"post-page\">\r\n          <h1>{item[0].title.rendered}</h1>\r\n          <div\r\n            className=\"post-content\"\r\n            dangerouslySetInnerHTML={{ __html: item[0].content.rendered }}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default PostPage;\r\n","import React from 'react'\r\n\r\nconst NormalHeader = () => {\r\n  return (\r\n    <header>\r\n      <div className=\"header-container\">\r\n        <h1>thundery Rescue</h1>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default NormalHeader;","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport Posts from \"./components/Posts\";\nimport PostPage from \"./components/PostPage\";\nimport NormalHeader from \"./components/NormalHeader\";\nimport StickyHeader from \"./components/StickyHeader\";\nimport \"./App.css\";\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<BrowserRouter basename={process.env.PUBLIC_URL + '/*'}>\n\t\t\t\t<div>\n\t\t\t\t\t<NormalHeader />\n\t\t\t\t\t{/* <StickyHeader containerTop={50} /> */}\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/\" component={Posts} exact={true} />\n\t\t\t\t\t\t<Route path=\"/post/:id\" component={PostPage} />\n\t\t\t\t\t\t<Route component={() => <div>404 not found</div>} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</BrowserRouter>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React, { Component } from \"react\";\n\nexport default class StickyHeader extends Component {\n  constructor(props) {\n    super(props);\n    this.handleScroll = this.handleScroll.bind(this);\n    this.state = {\n      visible: false\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"scroll\", this.handleScroll);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"scroll\", this.handleScroll);\n  }\n\n  handleScroll() {\n    const y = window.scrollY;\n    if (!this.props.containerTop) return;\n    this.setState({\n      visible: y > this.props.containerTop\n    });\n  }\n\n  render() {\n    const className = this.state.visible\n      ? \"stickyHeader isStuck\"\n      : \"stickyHeader\";\n    return (\n      <header className={className}>\n        <div className=\"header-container\">\n          <h1>Stickey thundery Rescue</h1>\n        </div>\n      </header>\n    );\n  }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}