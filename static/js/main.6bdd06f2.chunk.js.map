{"version":3,"sources":["Variable.js","components/Post.js","components/LoadingScreen.js","components/Posts.js","components/PostPage.js","components/NormalHeader.js","components/StickyHeader.js","App.js","serviceWorker.js","index.js"],"names":["Variable","Post","react_default","a","createElement","className","src","alt","Link","to","concat","this","props","data","slug","style","textDecoration","title","rendered","cats","map","cat","index","key","name","Component","LoadingScreen","react_loader_spinner_default","type","color","height","width","Posts","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","item","_this2","fetch","Config","then","res","json","result","setState","items","catch","err","console","log","_this$state","components_Post","LoadingScreen_LoadingScreen","PostPage","match","params","id","dangerouslySetInnerHTML","__html","content","NormalHeader","StickyHeader","handleScroll","bind","assertThisInitialized","visible","window","addEventListener","removeEventListener","y","scrollY","containerTop","App","BrowserRouter","components_NormalHeader","StickyHeader_StickyHeader","Route","path","component","exact","Boolean","location","hostname","ReactDOM","render","basename","process","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6bdd06f2.chunk.js","sourcesContent":["export default {\n  BASE_URL : \"https://thundery-rescue.000webhostapp.com/wp-json/wp/v2/\"\n}","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\r\n\r\nclass Post extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"post\">\r\n        <div className=\"\">\r\n          <img src=\"https://via.placeholder.com/300x150\" alt=\"\"></img>\r\n          <Link to={`/post/${this.props.data.slug}`} style={{textDecoration: 'none'}}>\r\n            <h3 className=\"post-title\" >{this.props.data.title.rendered}</h3>\r\n          </Link>\r\n          <div className=\"\">\r\n            {this.props.data.cats.map((cat,index) => (\r\n              <span className=\"category-tag\" key={index}>{cat.name}</span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Post;","import React, { Component } from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nexport default class LoadingScreen extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"loading-screen-center\">\r\n        <Loader type=\"Ball-Triangle\" color=\"#00BFFF\" height=\"100\" width=\"100\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Config from \"../Variable\";\r\nimport Post from './Post';\r\nimport LoadingScreen from './LoadingScreen';\r\n\r\n\r\nclass Posts extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      isLoading : false,\r\n      item : []\r\n    };\r\n  }\r\n\r\n  componentDidMount(){\r\n    fetch(`${Config.BASE_URL}Posts`)\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        this.setState({\r\n          isLoading : true,\r\n          items : result\r\n        })\r\n      })\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, items } = this.state;\r\n    if (!isLoading) {\r\n      return <LoadingScreen />\r\n    } else {\r\n      return (\r\n        <div className=\"container\">\r\n        {\r\n          items.map((item, index) => (\r\n            <Post key={index} data={item} />\r\n          ))\r\n        }\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Posts;\r\n","import React, { Component } from \"react\";\r\nimport Config from \"../Variable\";\r\nimport LoadingScreen from \"./LoadingScreen\";\r\n\r\nclass PostPage extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      isLoading: false,\r\n      item: []\r\n    };\r\n  }\r\n\r\n  componentDidMount(props) {\r\n    fetch(\r\n      `${Config.BASE_URL}posts?slug=${\r\n        this.props.match.params.id\r\n      }`\r\n    )\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        this.setState({\r\n          isLoading: true,\r\n          item: result\r\n        });\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  render() {\r\n    const { isLoading, item } = this.state;\r\n\r\n    if (!isLoading) {\r\n      return <LoadingScreen />;\r\n    } else {\r\n      return (\r\n        <div className=\"post-page\">\r\n          <h1>{item[0].title.rendered}</h1>\r\n          <div\r\n            className=\"post-content\"\r\n            dangerouslySetInnerHTML={{ __html: item[0].content.rendered }}\r\n          />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default PostPage;\r\n","import React from 'react'\r\n\r\nconst NormalHeader = () => {\r\n  return (\r\n    <header>\r\n      <div className=\"header-container\">\r\n        <h1>thundery Rescue</h1>\r\n      </div>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default NormalHeader;","// not working till now\n\nimport React, { Component } from \"react\";\n\nexport default class StickyHeader extends Component {\n  constructor(props) {\n    super(props);\n    this.handleScroll = this.handleScroll.bind(this);\n    this.state = {\n      visible: false\n    };\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"scroll\", this.handleScroll);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"scroll\", this.handleScroll);\n  }\n\n  handleScroll() {\n    const y = window.scrollY;\n    if (!this.props.containerTop) return;\n    this.setState({\n      visible: y > this.props.containerTop\n    });\n  }\n\n  render() {\n    const className = this.state.visible\n      ? \"stickyHeader isStuck\"\n      : \"stickyHeader\";\n    return (\n      <header className={className}>\n        <div className=\"header-container\">\n          <h1>Stickey thundery Rescue</h1>\n        </div>\n      </header>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\n\nimport Posts from './components/Posts';\nimport PostPage from './components/PostPage';\nimport NormalHeader from './components/NormalHeader';\nimport StickyHeader from './components/StickyHeader';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div>\n          <NormalHeader />\n          <StickyHeader containerTop={50}/>\n          <Route path=\"/\" component={Posts} exact={true}/>\n          <Route path=\"/post/:id\" component={PostPage} />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}